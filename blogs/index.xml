<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on livebug&#39;s blog space</title>
    <link>https://livebug.github.io/blogs/</link>
    <description>Recent content in Blogs on livebug&#39;s blog space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Oct 2023 00:36:17 +0800</lastBuildDate><atom:link href="https://livebug.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>css—用户代理样式表</title>
      <link>https://livebug.github.io/blogs/20231003-css-web-browser-style/</link>
      <pubDate>Tue, 03 Oct 2023 00:36:17 +0800</pubDate>
      
      <guid>https://livebug.github.io/blogs/20231003-css-web-browser-style/</guid>
      <description>一般处理方式怎加第一行代码
1&amp;lt;!DOCTYPE html&amp;gt; 如果不起作用就需要在样式上使用 !important</description>
    </item>
    
    <item>
      <title>使用 Github Actions 自动化发布博客</title>
      <link>https://livebug.github.io/blogs/20230930-github-actions/</link>
      <pubDate>Sat, 30 Sep 2023 13:58:58 +0800</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230930-github-actions/</guid>
      <description>介绍背景：
博客网站myblog仓库底下有两个子库，一个子库是用来存储markdown文章的blogs仓库，一个是用来存储public内容的github pages库 livebug.github.io仓库
当博客网站样式更新提交，或者文章提交，触发myblog仓库的 actions ，执行完之后发布到pages仓库
开发myblog仓库的提交 actions 1# Sample workflow for building and deploying a Hugo site to GitHub Pages 2name: Deploy Hugo site to Pages 3 4on: 5 # Runs on pushes targeting the default branch 6 push: 7 branches: [&amp;#34;master&amp;#34;] 8 9 # Allows you to run this workflow manually from the Actions tab 10 workflow_dispatch: 11 12# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages 13permissions: 14 contents: read 15 pages: write 16 id-token: write 17 18# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://livebug.github.io/blogs/about/</link>
      <pubDate>Tue, 26 Sep 2023 00:15:06 +0800</pubDate>
      
      <guid>https://livebug.github.io/blogs/about/</guid>
      <description>一个 .neter 小白，各种浅尝辄止，一瓶子不满，半瓶子咣当，学了就忘，不整理真是不沉底
计算机科学与技术专业毕业，搬砖几年，在计算机的海洋里还没淹死，乱七八糟的各种涉猎，在此记录
德云社多年线上粉丝，惭愧，收集快乐经典场分享，也供自己来回享受
目前只是开源了自己当初的大学时期的计算科学和GPU通用计算的
希望可以通过自己学到的东西，可以改变一些东西，解放人力，解放思想
邮箱：
datamover@126.com livebug@163.com github page:
https://livebug.github.io/ 崇尚某些事情，并不是拿来与他人比较，然后凸显自己的独特性，去真正的思考和学习，终归要沉下心来去吸收
实事求是，基于调查研究，最终目的还是要解决问题的
无论是推诿或者逃避，面临的问题还是在哪的，还是需要处理的
“实事”就是客观存在着的一切事物，“是”就是客观事物的内部联系，即规律性，“求”就是我们去研究。——（毛泽东）
辛苦不是理由，质量才是关键。
==========================================
计划：
🆗 增加自动流程，提交文章或者网站更新后自动更新 github pages
🆗 增加文章页的标签显示
增加时间轴功能
文章页功能丰富
增加目录功能 增加标签 增加评论，点赞、转发 历史文章迁移
文章生成脚本文件名带日期</description>
    </item>
    
    <item>
      <title>gitee增加ssh 实现免密访问</title>
      <link>https://livebug.github.io/blogs/20230922-gitee-add-sshkey/</link>
      <pubDate>Fri, 22 Sep 2023 23:48:19 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230922-gitee-add-sshkey/</guid>
      <description>前言 其实实现这个很简单，根据提供的提示文档按部就班增加就行
https://help.gitee.com/base/account/SSH%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE#:~:text=%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE-,SSH%20%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE,-Gitee%20%E6%8F%90%E4%BE%9B%E4%BA%86
本文主要是想说明 ssh的原理以及应用
SSH 原理 什么是SSH SSH 叫安全外壳协议（Secure Shell），是一种加密的网络传输协议，可在不安全的网络中网络服务提供安全的传输环境。它通过在网络中创建安全隧道来实现 SSH 客户端和服务器之间的连接。
对称加密 对方同自己用于同样的密钥，加解密时用一样的
非对称加密 非对称加密需要一对秘钥来进行加密和解密，公开的秘钥叫公钥，私有的秘钥叫私钥。注意公钥加密的信息只有私钥才能解开（加密过程），私钥加密的信息只有公钥才能解开（验签过程）。比较常用的非对称加密算法有 RSA。
图解， Server A 免登录到 Server B :
在A上生成公钥、私钥 将公钥拷贝给 Server B ，将公钥拷贝到 Server A 向 Server B 发送一个连接请求。 Server B 得到 Server A 的信息后，在authorized_key中查找，如果有相应的用户名和IP，则随机生成一个字符串，并用 Server A 的公钥加密，发送给 Server A 。 Server A 得到 Server B 发来的消息后，使用私钥进行解密，然后将解密后的字符串发送给 Server B 。 Server B 进行和生成的对比，如果一致，则允许免登录。 总之 ：A要免密码登录到B，B首先要拥有A的公钥，然后B要做一次加密验证。对于非对称加密，公钥加密的密文不能公钥解开，只能私钥解开。
&amp;mdash; 相关文档 &amp;mdash;
SSH使用 第一篇 - SSH 使用 第二篇 - gitee SSH免密登录 </description>
    </item>
    
    <item>
      <title>正则表达式-先行断言(lookahead)和后行断言(lookbehind)</title>
      <link>https://livebug.github.io/blogs/20230917-regexp-lookahead/</link>
      <pubDate>Sun, 17 Sep 2023 23:48:19 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230917-regexp-lookahead/</guid>
      <description>正则表达式的先行断言和后行断言一共有 4 种形式：
(?=pattern) 零宽正向先行断言(zero-width positive lookahead assertion)
正向先行断言 代表字符串中的一个位置，紧接该位置之后的字符序列能够匹配 pattern。
(?!pattern) 零宽负向先行断言(zero-width negative lookahead assertion)
负向先行断言 代表字符串中的一个位置，紧接该位置之后的字符序列不能匹配 pattern。
(?&amp;lt;=pattern) 零宽正向后行断言(zero-width positive lookbehind assertion)
正向后行断言 代表字符串中的一个位置，紧接该位置之前的字符序列能够匹配 pattern。
(?&amp;lt;!pattern) 零宽负向后行断言(zero-width negative lookbehind assertion)
负向后行断言 代表字符串中的一个位置，紧接该位置之前的字符序列不能匹配 pattern。</description>
    </item>
    
    <item>
      <title>sql语言脚本开发-语法突出</title>
      <link>https://livebug.github.io/blogs/20230909-vscode-sqllang/</link>
      <pubDate>Sun, 27 Aug 2023 23:48:19 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230909-vscode-sqllang/</guid>
      <description>语法突出显示指南：VS Code 使用文本伴侣(TextMate)语法进行语法突出显示。本指南将引导您编写简单的 TextMate 语法并将其转换为 VS Code 扩展。
TextMate 语法 1{ 2 scopeName = &amp;#39;source.untitled&amp;#39;; 3 fileTypes = ( ); 4 foldingStartMarker = &amp;#39;\{\s*$&amp;#39;; 5 foldingStopMarker = &amp;#39;^\s*\}&amp;#39;; 6 patterns = ( 7 { name = &amp;#39;keyword.control.untitled&amp;#39;; 8 match = &amp;#39;\b(if|while|for|return)\b&amp;#39;; 9 }, 10 { name = &amp;#39;string.quoted.double.untitled&amp;#39;; 11 begin = &amp;#39;&amp;#34;&amp;#39;; 12 end = &amp;#39;&amp;#34;&amp;#39;; 13 patterns = ( 14 { name = &amp;#39;constant.character.escape.untitled&amp;#39;; 15 match = &amp;#39;\\.&amp;#39;; 16 } 17 ); 18 }, 19 ); 20} 语言语法用于为文档元素（如关键字、注释、字符串或类似元素）分配名称。这样做的目的是允许样式（语法突出显示），并使文本编辑器“智能”了解插入符号所在的上下文。例如，您可能希望击键或制表符触发器根据上下文采取不同的操作，或者您可能希望在键入文本文档中非散文的部分（例如.</description>
    </item>
    
    <item>
      <title>wsl环境初始化-安装nvm</title>
      <link>https://livebug.github.io/blogs/20230909-wsl-init-devenv/</link>
      <pubDate>Sun, 27 Aug 2023 23:48:19 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230909-wsl-init-devenv/</guid>
      <description>安装 nodejs 环境 1.vscode版本： 1版本: 1.82.0 (user setup) 2提交: 8b617bd08fd9e3fc94d14adb8d358b56e3f72314 3日期: 2023-09-06T22:07:07.438Z 4Electron: 25.8.0 5ElectronBuildId: 23503258 6Chromium: 114.0.5735.289 7Node.js: 18.15.0 8V8: 11.4.183.29-electron.0 9OS: Windows_NT x64 10.0.25941 2.修改host 有科学上网条件的就不用了，建议需要的上个机场
nslookup 查看 github 的网站，修改 hosts
1nslookup http://github.global.ssl.fastly.net 2nslookup http://github.com 3nslookup http://raw.githubusercontent.com 4 5# hosts 6199.16.158.9 http://github.global.ssl.fastly.net 7199.16.158.9 https://github.global.ssl.fastly.net 820.205.243.166 http://github.com 920.205.243.166 https://github.com 10185.199.111.133 http://raw.githubusercontent.com 11185.199.111.133 https://raw.githubusercontent.com 12185.199.110.133 http://raw.githubusercontent.com 13185.199.110.133 https://raw.githubusercontent.com 14185.199.108.133 http://raw.githubusercontent.com 15185.199.108.133 https://raw.githubusercontent.com wsl 的 hosts 是复制宿主 windows的，所以要修改 windows hosts 就可以</description>
    </item>
    
    <item>
      <title>ssh基本介绍和问题解答</title>
      <link>https://livebug.github.io/blogs/20230827-ssh-connect/</link>
      <pubDate>Tue, 27 Jun 2023 23:48:19 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230827-ssh-connect/</guid>
      <description>SSH 简单介绍 在 Linux 系统上 SSH 是非常常用的工具，通过 SSH Client 我们可以连接到运行了 SSH Server 的远程机器上。SSH Client 的基本使用方法是：
1ssh user@remote -p port user 是你在远程机器上的用户名，如果不指定的话默认为当前用户 remote 是远程机器的地址，可以是 IP，域名，或者是后面会提到的别名 port 是 SSH Server 监听的端口，如果不指定的话就为默认值 22 免密码登入 每次 ssh 都要输入密码是不是很烦呢？与密码验证相对的，是公钥验证。也就是说，要实现免密码登入，首先要设置 SSH 钥匙。
其实就是把自己的公钥给服务器，让服务器可以认证你
查看有没有ssh server ？ 1/etc/init.d/ssh status 怎么生成密钥 ？ 1ssh-keygen -t rsa 查看本机的ssh密钥公钥 ？ 1-- windows 目录 2/c/Users/xxxx/.ssh 3 4cat id_rsa.pub # 这个是用rsa协议来生成的 怎么添加公钥到其他机器的 可以直接用工具传输
1# 密钥发送 2 ssh-copy-id -i id_rsa.pub xxx@192.168.0.103 也可以直接复制里面的内容，直接复制到服务器ssh目录下的
防火墙 ufw 开启ssh ？ 1 41 /usr/sbin/ufw 2 47 /usr/sbin/ufw allow ssh 3 60 /usr/sbin/ufw status 4 70 /etc/init.</description>
    </item>
    
    <item>
      <title>fedora安装docker</title>
      <link>https://livebug.github.io/blogs/20230426-fedora-install-docker/</link>
      <pubDate>Wed, 26 Apr 2023 23:38:56 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230426-fedora-install-docker/</guid>
      <description>安装参考教程连接
简单记录 安装dnf源中默认的Docker（podman-docker） 1# 运行以下命令，安装podman-docker。 2dnf -y install docker 3# 运行以下命令，查看Docker是否安装成功。 4docker images 5 权限问题 1sudo gpasswd -a $USER docekr 2newgrp docker 3docker ps -a 安装gaussdb 1docker run --name opengauss --privileged=true -d -e GS_PASSWORD=Enmo@123 \ 2 -v /data/opengauss:/var/lib/opengauss -u root -p 15432:5432 \ 3 enmotech/opengauss:latest 默认用户 gaussdb
gauss 使用 1drop table sdopdb.bqqyxx; 2create table sdopdb.bqqyxx 3( 4	p_year varchar(4) not null, 5	p_type varchar(40) NOT NULL, 6	p_rank varchar(4) NOT NULL, 7	p_busi_nm varchar(100) NOT NULL, 8	p_income DECIMAL(20,6) NOT NULL 9); 10COMMENT ON TABLE sdopdb.</description>
    </item>
    
    <item>
      <title>fedora打开Samba端口</title>
      <link>https://livebug.github.io/blogs/20230425-fedora-open-sambaport-firewall/</link>
      <pubDate>Tue, 25 Apr 2023 10:36:21 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230425-fedora-open-sambaport-firewall/</guid>
      <description>来源：
https://www.linuxprobe.com/fedora-centos-samba.html
在CentOS/RHEL 7中打开Samba端口
使用以下命令：
firewall-cmd --permanent --zone=public --add-service=samba firewall-cmd --reload 注意事项：
需要加用户密码时，使用本机已经有的账户，但秘密可以随便设置 </description>
    </item>
    
    <item>
      <title>fedora系统安装后的基本操作</title>
      <link>https://livebug.github.io/blogs/20230422-fedorainstall/</link>
      <pubDate>Sat, 22 Apr 2023 16:39:49 +0000</pubDate>
      
      <guid>https://livebug.github.io/blogs/20230422-fedorainstall/</guid>
      <description>fedora 安装之后的操作 1. 换国内软件源 1sudo sed -e &amp;#39;s|^metalink=|#metalink=|g&amp;#39; \ 2 -e &amp;#39;s|^#baseurl=http://download.example/pub/fedora/linux|baseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora|g&amp;#39; \ 3 -i.bak \ 4 /etc/yum.repos.d/fedora.repo \ 5 /etc/yum.repos.d/fedora-modular.repo \ 6 /etc/yum.repos.d/fedora-updates.repo \ 7 /etc/yum.repos.d/fedora-updates-modular.repo 8 9sudo dnf makecache 10sudo dnf autoremove 11sudo dnf remove --oldinstallonly 2. 设置 gnome-terminal 快捷键 ctrl+alt+t 3. 安装基本软件 2.1 edge 浏览器
2.2 vscode
https://vscode.cdn.azure.cn/stable/704ed70d4fd1c6bd6342c436f1ede30d1cff4710/code-1.77.3-1681292829.el7.x86_64.rpm
2.3 dotnet6
2.4 nvm
2.5 安装 GNOME 优化和扩展应用程序
1sudo dnf install gnome-tweaks gnome-extensions-app https://extensions.gnome.org/
安装 dash to dock 插件，可以让dock在桌面悬浮</description>
    </item>
    
  </channel>
</rss>
